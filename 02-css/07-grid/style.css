*, ::before, ::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body{
    min-height: 100vh;
    /*
     Le display grid permet de construire une grille sur laquelle nous allons placer nos differents éléments. 
    */
    display: grid;
    /* 
    permet d'indiquer la taille des differentes rangées. Chaque valeurs crée une nouvelle rangées.
    (Si le nombre d'éléments dépasse le nombre de cases, la grid créé des rangées automatiquement)
        * Auto permet de laisser le choix à CSS de la taille. (si il reste de la place, il se la partagera, si tout est prit, il prendras juste ce dont il a besoin pour le contenu de l'élément)
        * 1fr, 1 fraction de la page. Si il n'y a qu'une seule unité fr, elle prendra tout l'éspace restant
    La première et troisème ligne, prend juste la taille dont elles ont besoin
    */
    grid-template-rows: auto 1fr auto;
}
main{
    display: grid;
    grid-template-rows:20vh auto 200px 100px;
    /* Fonctionne comme grid-template-rows mais pour les colonnes repeat permet de répéter un nombre de colonne avec la même valeur
     */
     /* grid-template-columns: 15% 15% 15% 15% 15% */
     grid-template-columns: repeat(5, 15%);
     /* Si les colonnes n'utilisent âs toute la place, permet de les deplacer ou les espacer */
     justify-content: space-evenly;
     /* Par défaut, les éléments enfants se placent dans l'odre d'arrivé  */    
}
main > div:nth-child(1){
    background-color: lightgreen;
    grid-column-start: 2;
    grid-column-end: 5;
    grid-row-start: 1;
    grid-row-end: 3;
}
main> div:nth-child(2){
    background-color: lightblue;
    grid-column: 1/2;
    grid-row: 1/3;
}
main> div:nth-child(3){
    background-color: lightcoral;
    grid-area: 1/5/4/6;
}
main> div:nth-child(4){
    background-color: lightseagreen;
    grid-row: 3/ span 2;
    grid-column: 1/ span 2;
}
main> div:nth-child(5){
    background-color: lightgoldenrodyellow;
    grid-row: 2/ span 2;
    grid-column: 2/ span 2;
}
main> div:nth-child(6){

}